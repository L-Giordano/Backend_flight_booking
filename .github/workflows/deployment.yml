name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1


    - name: Set environment variables
      run: |
            aws s3 cp s3://f-booking-terraform-remote-state/ecr-fb-state/terraform.tfstate .
            export ECR_REPOSITORY=$(aws terraform output -json -state=terraform.tfstate ecr-repository_name | jq -r '.value')

            aws s3 cp s3://f-booking-terraform-remote-state/ecs-fb-state/terraform.tfstate .
            export ECS_SERVICE=$(aws terraform output -json -state=terraform.tfstate ecs_service_name | jq -r '.value')

            aws s3 cp s3://f-booking-terraform-remote-state/ecs-fb-state/terraform.tfstate .
            export ECS_CLUSTER=$(aws terraform output -json -state=terraform.tfstate aws_ecs_cluster_name | jq -r '.value')

            aws s3 cp s3://f-booking-terraform-remote-state/ecs-fb-state/terraform.tfstate .
            export CONTAINER_NAME=$(aws terraform output -json -state=terraform.tfstate container_name | jq -r '.value')

            aws s3 cp s3://f-booking-terraform-remote-state/ecs-fb-state/terraform.tfstate .
            export ECS_TASK_DEFINITION=$(aws terraform output -json -state=terraform.tfstate task-definition | jq -r '.value')

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: fbooking-backend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition fbooking-task-definition --query taskDefinition > task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ec2-fbooking-backend
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true